--- LevityCatch.thy
+++ LevityCatch.thy
@@ -13,12 +13,14 @@ begin
 (* Try again, clagged from Include *)
 no_notation bind_drop (infixl ">>" 60)
 
+lemma read_magnitudeCheck_assert:
+  "read_magnitudeCheck x y n = oassert (case y of None \<Rightarrow> True | Some z \<Rightarrow> 1 << n \<le> z - x)"
+  by (fastforce simp: read_magnitudeCheck_def split: option.split)
+
 lemma magnitudeCheck_assert:
   "magnitudeCheck x y n = assert (case y of None \<Rightarrow> True | Some z \<Rightarrow> 1 << n \<le> z - x)"
-  apply (simp add: magnitudeCheck_def assert_def when_def
-            split: option.split)
-  apply fastforce
-  done
+  by (simp add: magnitudeCheck_def read_magnitudeCheck_assert)
+
 context begin interpretation Arch . (*FIXME: arch_split*)
 lemmas makeObject_simps =
   makeObject_endpoint makeObject_notification makeObject_cte
@@ -26,16 +28,18 @@ lemmas makeObject_simps =
   makeObject_asidpool
 end
 
-lemma projectKO_inv : "\<lbrace>P\<rbrace> projectKO ko \<lbrace>\<lambda>rv. P\<rbrace>"
-  by (simp add: projectKO_def fail_def valid_def return_def
-           split: option.splits)
+lemma projectKO_inv : "\<lbrace>P\<rbrace> gets_the $ projectKO ko \<lbrace>\<lambda>rv. P\<rbrace>"
+  by wpsimp
 
 (****** From GeneralLib *******)
 
+lemma read_alignCheck_assert:
+  "read_alignCheck ptr n = oassert (is_aligned ptr n)"
+  by (simp add: is_aligned_mask read_alignCheck_def read_alignError_def ounless_def)
+
 lemma alignCheck_assert:
   "alignCheck ptr n = assert (is_aligned ptr n)"
-  by (simp add: is_aligned_mask alignCheck_def assert_def
-                alignError_def unless_def when_def)
+  by (simp add: read_alignCheck_assert alignCheck_def)
 
 lemma magnitudeCheck_inv:   "\<lbrace>P\<rbrace> magnitudeCheck x y n \<lbrace>\<lambda>rv. P\<rbrace>"
   apply (clarsimp simp add: magnitudeCheck_def split: option.splits)
